import os
import pwd
import logging
from datetime import date

class Utils:
	"""
	Property that stores an object of type FormDialogs.
	"""
	form_dialog = None

	"""
	Constructor for the Utils class.

	Parameters:
	self -- An instantiated object of the Utils class.
	"""
	def __init__(self, form_dialog):
		self.form_dialog = form_dialog

	"""
	Method that defines a directory based on the main Inv-Alert
	directory.

	Parameters:
	self -- An instantiated object of the Utils class.
	path_dir -- Directory that is added to the main Inv-Alert 
	            directory.
	form_dialog -- A FormDialogs class object.

	Return:
	path_final -- Defined final path.

	Exceptions:
	OSError -- This exception is raised when a system function
	           returns a system-related error, including I/O
	           failures such as “file not found” or “disk full”
	           (not for illegal argument types or other incidental
	           errors).
	TypeError -- Raised when an operation or function is applied
				 to an object of inappropriate type. The associated
				 value is a string giving details about the type 
				 mismatch.
	"""
	def getPathInvAlert(self, path_dir):
		path_main = "/etc/Inv-Alert-Suite/Inv-Alert"
		try:
			path_final = os.path.join(path_main, path_dir)
		except (OSError, TypeError) as exception:
			self.createInvAlertToolLog(exception, 3)
			print(exception)
			self.form_dialog.d.msgbox("\nAn error has occurred. For more information, see the logs.", 8, 50, title = "Error Message")
		else:
			return path_final

	"""
	Method that changes an owner path, by inv_alert user and 
	group.

	Parameters:
	self -- An instantiated object of the Utils class.
	path_to_change -- Directory that will change owner.

	Exceptions:
	OSError -- This exception is raised when a system function
	           returns a system-related error, including I/O
	           failures such as “file not found” or “disk full”
	           (not for illegal argument types or other incidental
	           errors).
	"""
	def ownerChange(self, path_to_change):
		try:
			uid = pwd.getpwnam('inv_alert').pw_uid
			gid = pwd.getpwnam('inv_alert').pw_gid
			os.chown(path_to_change, uid, gid)
		except OSError as exception:
			self.createInvAlertToolLog(exception, 3)
			self.form_dialog.d.msgbox("\nFailed to change owner path. For more information, see the logs.", 8, 50, title = "Error Message")

	"""
	Method that validates an entered value based on a defined
	regular expression.

	Parameters:
	self -- An instantiated object of the Utils class.
	regular_expression -- Regular expression with which the 
						  data will be validated.
	data_entered -- Data to be validated.

	Return:
	If the data entered is valid or not.
	"""
	def validateRegularExpression(self, regular_expression, data_entered):
		if(not regular_expression.match(data_entered)):
			return False
		return True

	"""
	Method that writes the logs generated by the application in
	a file.

	Parameters:
	self -- An instantiated object of the Utils class.
	message -- Message to be shown in the log.
	type_log -- Type of log to write.
	"""
	def createInvAlertToolLog(self, message, type_log):
		name_log = '/var/log/Inv-Alert/inv-alert-tool-log-' + str(date.today()) + '.log'
		logger = logging.getLogger('Inv_Alert_Tool_Log')
		logger.setLevel(logging.INFO)
		fh = logging.FileHandler(name_log)
		logger.addHandler(fh)
		formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
		fh.setFormatter(formatter)
		logger.addHandler(fh)
		if type_log == 1:
			logger.info(message)
		if type_log == 2:
			logger.warning(message)
		if type_log == 3:
			logger.error(message)
		self.ownerChange(name_log)

